PROCEDURES - É uma espécie de programa que irá executar certa ação recebendo parâmetros.
  .Pontos de um Stored Procedure:
  	..O nome da Stored Procedure deve ter apenas letras, números, $ e _.
  	..Tamanho máximo de 64 caracteres.
  	..Deve ser nome único.
  	..É case senstive.
  	
  .Criar uma PROCEDURE:
  	Botão direito em Stored Procedures -> Create Stored Procedures -> Preencher com as operações.
  	
  	Ex: CREATE PROCEDURE `show_number_alias` ()
	    BEGIN
	    select (1+0)-5 as RESULTADO;
	    END
	    
	..Podemos usar funções na procedure:
		CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_with_functions`()
		BEGIN
		select concat('Alô mundo!!!','...',(8+13)-5) as ITENS_COMBINADOS;
		END
		
	..Podemos utilizar comentários nas procedures:
		Comentário pode ser uma única linha, utilizando o -- ou utilizando /* */
		
		Ex:CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_with_comment`()
		BEGIN
		/* Vamos exibir itens combinados 
		entre textos e números */
		-- Usando a função CONCAT
		select concat('Alô mundo!!!', 33+(10-20), ' Tchau!!!');
		END
  	
  .Para chamar uma Stored Procedure, utilizamos a função call:
  	call hello_world;
  	
  .Para alterar ou excluir uma Stored Procedure: 
  	Botão direito na Procedure desejada -> Alter/Drop Stored Procedure;
  	
  .Podemos fazer o create, alter e drop por linha de comando:
  	..Create - 
  		USE `vendas_sucos`;
  		DROP procedure IF EXISTS `hello_world_2`;

		DELIMITER $$
		USE `vendas_sucos`$$
		CREATE PROCEDURE `hello_world_2` ()
		BEGIN
		select 'Alô mundo!!!' as RESULTADO;
		END$$
		
		DELIMITER ;

	..Alter - 
		USE `vendas_sucos`;
		DROP procedure IF EXISTS `hello_world_2`;

		DELIMITER $$
		USE `vendas_sucos`$$
		CREATE PROCEDURE `hello_world_2`()
		BEGIN
		select 'Alô mundo, tudo bem??' as RESULTADO;
		END$$

		DELIMITER ;
		
	..Drop - 
		USE `vendas_sucos`;
  		DROP procedure IF EXISTS `hello_world_2`;
  	
  	Obs: O delimiter serve para modificar a separação de linha, para que o workbench não confunda o ; da criação da procedure com os ; das linhas de comandos do procedure.
  	
  .Criando Variáveis:
  	..Caracteristicas de uma Variável:
  		...Datatype é obrigatório.
  		...Default é opcional.
  		...Nome de variável pode ter apenas letras, números, $ e _.
  		...Deve ser único dentro da Stored Procedure.
  		...É case sensitive.
  		...Tamanho máximo 255 caracteres.
  		...Se não houver valor default, o valor da variável será null.
  		...A linha de declaração deve terminar com ponto e vírgula.
  		
  		Obs: Variáveis são boas na criação de procedures pois permite criar um dinamismo no programa.
  		
  	..Tipos de Variáveis:
  		...Varchar(n) - Caracteres textos com tamanho máximo de n caracteres.
  		...Integer - Variável do tipo inteiro.
  		...Decimal(p,s) - Variável decimal com p dígitos e s pontos decimais.
  		...Date - Para guardar data.
  		...Timestamp - Para guardar data e hora.
  	
  	..Declarando uma Variável:
  		declare nome_variavel datatype_variavel default valor_default;
  		
  		declare texto char(20) default 'Olá mundo!!!';
  		declare ts datetime default localtimestamp();
  		
  		Obs: Podemos declarar mais de uma variável por comando - 
  			declare data_1, data_2 date default '2020-03-11';
  			
  		Obs: Podemos dar valores a variáveis durante a procedure através do set - 
  			declare texto varchar(30) default 'Texto inicial';
  			set texto = 'Texto modificado';
  			
  		Ex: CREATE PROCEDURE `sp_Exerc01` ()
  		    BEGIN
  		      declare Cliente varchar(10);
  		      declare Idade integer;
  		      declare DataNascimento date;
  		      declare Custo decimal(4,2);
  		      set Cliente = 'João';
  		      set Idade = 10;
  		      set DataNascimento = '2007-01-10';
  		      set Custo = 10.23;
  		      select Cliente, Idade, DataNascimento, Custo;
  		    END
  		    
  		Obs: Para apagar uma procedure por linha de comando - 
  			DROP procedure IF EXISTS `teste`;
  			
  .Inserindo valores com VARIÁVEIS atrabés de STORED PROCEDURES:
  	DECLARE vCodigo varchar(50) DEFAULT '3000001';
  	DECLARE vNome varchar(50) DEFAULT 'Sabor do Mar 700 ml - Manga';
  	DECLARE vSabor varchar(50) DEFAULT 'Manga';
  	DECLARE vTamanho varchar(50) DEFAULT '700 ml';
  	DECLARE vEmbalagem varchar(50) DEFAULT 'Garrafa';
  	DECLARE vPreco DECIMAL(10,2) DEFAULT 9.25;
  	INSERT INTO tabela_de_produtos
  	(CODIGO_DO_PRODUTO,NOME_DO_PRODUTO,SABOR,TAMANHO,EMBALAGEM,PRECO_DE_LISTA)
     	VALUES (
     	vCodigo,
     	vNome,
     	vSabor,
     	vTamanho,
     	vEmbalagem,
     	vPreco);
     	
     	Exércicio: Crie uma Stored procedure que atualize a idade dos clientes - 
     		update tabela_de_clientes set IDADE = TIMESTAMPDIFF(YEAR, data_de_nascimento, CURDATE());
     		
  .Utilizando PARÂMETROS EM UMA STORED PROCEDURE:
  	--
  	CREATE PROCEDURE `inclui_novo_produto_parametro` (vCodigo varchar(50), vNome varchar(50), vSabor varchar(50), vTamanho varchar(50), vEmbalagem varchar(50), vPreco DECIMAL(10,2))
	BEGIN
	  INSERT INTO tabela_de_produtos
	  (CODIGO_DO_PRODUTO,NOME_DO_PRODUTO,SABOR,TAMANHO,EMBALAGEM,PRECO_DE_LISTA)
	  VALUES (
	  vCodigo,
	  vNome,
	  vSabor,
	  vTamanho,
	  vEmbalagem,
	  vPreco);
	END
	
	call inclui_novo_produto_parametro('4000132','Sabor da Montanha 700 ml - Uva','Uva','700 ml','Garrafa', 9.30);
	--
	
	--
	
	CREATE DEFINER=`root`@`localhost` PROCEDURE `Reajuste_Comissao`(vComissao float)
	BEGIN
	update tabela_de_vendedores set PERCENTUAL_COMISSAO = vComissao; / UPDATE tabela_de_vendedores SET percentual_comissao = percentual_comissao * (1 + vPercent);
	select * from tabela_de_vendedores;
	END
	
	call Reajuste_Comissao(0.90);
	--
	
	Obs: Aos invés de declararmos as variáveis, colocamos elas no local do parâmetro, entre parenteses depois do nome da stored procedure.
	
  .Controle de erros com mensagens:
  	..Utilizando mensagem simples:
  		CREATE PROCEDURE `inclui_novo_produto_parametro`(vCodigo varchar(50), vNome varchar(50), vSabor varchar(50), vTamanho varchar(50), vEmbalagem varchar(50), vPreco DECIMAL(10,2))
  		BEGIN
  		declare mensagem varchar(40);
  		INSERT INTO tabela_de_produtos
  		(CODIGO_DO_PRODUTO,NOME_DO_PRODUTO,SABOR,TAMANHO,EMBALAGEM,PRECO_DE_LISTA)
  	   	VALUES (
  	  	vCodigo,
  	  	vNome,
  	  	vSabor,
  	   	vTamanho,
  	   	vEmbalagem,
		Preco);
  		set mensagem = 'Produto inserido com sucesso!';
  		select mensagem as Mensagem;
  		END

	..Para o controle de erro, utilizamos o declare exit handler for codigo_do_erro, que traduzindo, caso ocorra o erro especificado, ele irá sair do programa e executar os comandos entre o BEGIN e END (No nosso caso será exibir a mensagem de erro) - 
		CREATE PROCEDURE `inclui_novo_produto_parametro`(vCodigo varchar(50), vNome varchar(50), vSabor varchar(50), vTamanho varchar(50), vEmbalagem varchar(50), vPreco DECIMAL(10,2))
		BEGIN
		declare mensagem varchar(40);
		declare exit handler for 1062
		BEGIN
		  set mensagem = 'Cógido de produto já existente!';
		  select mensagem as Mensagem;
		END;
		INSERT INTO tabela_de_produtos
		(CODIGO_DO_PRODUTO,NOME_DO_PRODUTO,SABOR,TAMANHO,EMBALAGEM,PRECO_DE_LISTA)
		     VALUES (vCodigo,
		     vNome,
		     vSabor,
		     vTamanho,
		     vEmbalagem,
		     vPreco);
		set mensagem = 'Produto inserido com sucesso!';
		select mensagem as Mensagem;
		END
	
	Obs: O controle de erro precisa estar antes do INSERT, pois fica guardado o a declaração para caso ocorra o erro, então ele para o comando, por exemplo de INSERT, e executa o controle de erro.
	
	..Utilizando o SELECT para atribuir valor a variável:
		CREATE PROCEDURE `acha_sabor_produto` (vProduto varchar(50))
		BEGIN
		declare vSabor varchar(50);
		select SABOR into vSabor from tabela_de_produtos where CODIGO_DO_PRODUTO = vProduto;
		select vSabor;
		END

		Obs: É necessário usar o INTO para transformar o campo em uma variável, para podermos imprimir a variável com a informação correta.
		
		Exercício: Crie uma variável chamada NUMNOTAS e atribua a ela o número de notas fiscais do dia 01/01/2017. Mostre na saída do script o valor da variável. (Chame esta Stored Procedure de Quantidade_Notas) - 
			CREATE PROCEDURE `Quantidade_Notas`()
			BEGIN
			declare NUMNOTAS integer;
			select count(*) into NUMNOTAS from notas_fiscais where DATA_VENDA = '2017-01-01' group by DATA_VENDA ;
			select NUMNOTAS as `Qtd de Notas`;
			END
		
  .Fazendo controle de fluxo utilizando IF:
  	IF confição then ... else ... end if
  	
  	CREATE PROCEDURE `cliente_novo_velho`(vCPF varchar(11)) (menores de 2000 = novos, maiores de 2000 = velhos)
  	BEGIN
  	  declare vResultado varchar(20);
  	  declare vDataNascimento date;
  	  select DATA_DE_NASCIMENTO into vDataNascimento from tabela_de_clientes where CPF = vCPF;
  	  if vDataNascimento < '2000-01-01' then 
  	  	set vResultado = 'Cliente novo';
  	  else 
  	  	set vResultado = 'Cliente velho';
	  end if;
	  select vResultado as `Estado cliente`;
	END
	
	Exercício: Crie uma Stored Procedure que, baseado em uma data, contamos o número de notas fiscais. Se houverem mais que 70 notas exibimos a mensagem: ‘Muita nota’. Ou então exibimos a mensagem ‘Pouca nota’. Também exibir o número de notas. Chame esta Stored Procedure de Testa_Numero_Notas - 
		CREATE PROCEDURE `Testa_Numero_Notas`(vData date)
		BEGIN
		  declare vQuantidade integer;
		  declare vResultado varchar(50);
		  select count(*) into vQuantidade from notas_fiscais where DATA_VENDA = vData group by DATA_VENDA;
		  if vQuantidade > 70 then
			set vResultado = 'Muita nota';
		  else
		  	set vResultado = 'Pouca nota';
		  end if;
		  select vResultado as `Situação nota`, vQuantidade as Quantidade;
		END
